UDEMY KOTLIN
..............
...............

Code for Variables and Datatypes
//////////////////////////////////////////

Please find the code with some explanations here:



fun main() {
    println("Hello, world!!!")
    // This is a comment. Comments start with //
    // val is used for variables which are immutable (not changable)
    val myName = "Denis"
    // myName = "Michael" // ERROR: Val cannot be reassigned
 
    /* This is a multi line comment starts with /* and ends with *'/ without the '
     var is used for variables which are mutable/changeable.
     kotlin is a strongly typed language that supports Type Inference.
     The compiler will directly assume the size and type to a variable by that.
     For example, if you assign any whole number to a variable,
     the compiler will directly assume that the variable is of type Int
    */ */
    var myAge = 31
 
    // Integer TYPES: Byte (8 bit), Short (16 bit), Int (32 bit), Long (64 bit)
    val myByte: Byte = 13
    val myShort: Short = 125
    val myInt: Int = 123123123
    val myLong: Long = 12_039_812_309_487_120
 
    // Floating Point number Types: Float (32 bit), Double (64 bit)
    val myFloat: Float = 13.37F
    val myDouble: Double = 3.14159265358979323846
 
    // Booleans the type Boolean is used to represent logical values.
    // It can have two possible values true and false.
    var isSunny: Boolean = true
    // not sunny anymore...
    isSunny = false
 
    // Characters
    val letterChar = 'A'
    val digitChar = '1'
 
    // Strings
    val myStr = "Hello World"
    var firCharInStr = myStr[0]
    var lastCharInStr = myStr[myStr.length - 1]
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.....................................................................................................................................................
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
......................................................................................................................................................


Exercise Variables And Datatypes
Please write a program in which you are assigning those values to variables with the right (specific) data type:



"Android Masterclass"

13.37F

3.14159265358979

25

2020

18881234567

true

'a'



Please don't simply use Kotlin's powerful type inference feature for this.

For example, write

var age : Short = 25

and not

var age = 25

even though both are correct. This is just for testing your understanding of the different basic data types.
All of them should be "var", except for the pi value and 13.37, use "val" here.
Try to use descriptive and useful names
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Code: Loops
Please find the code for the loops lectures here:
.........................................................
............................................................

fun main(){
    var condition = true
    // Loops
    // While Loop
    // While loop executes a block of code repeatedly as long as a given condition is true
    while(condition) {
        // code to be executed
    }
 
    var y = 1
    while(y <= 10) {
        println("$y ")
        y++
    }
 
    // Do while loop
    // The do-while loop is similar to while loop except that it 
    // tests the condition at the end of the loop. 
    // This means that it will at least execute the body once
    var z = 1
    do {
        print("$z ")
        z++
    } while(z <= 10)
 
    var feltTemp = "cold"
    var roomTemp = 10
    while (feltTemp == "cold"){
        roomTemp++
        if(roomTemp == 20){
            feltTemp = "comfy"
            println("it's comfy now")
        }
    }
 
 
    // For Loop
    // A for-loop is used to iterate through ranges, arrays, collections, or anything 
    // that provides an iterator (You’ll learn about iterator, arrays, ranges and collections in a future lectur    e).
    for(num in 1..10) {
        print("$num ")
    }
 
    // infix notation
    for(i in 1 until 10) { // Same as - for(i in 1.until(10))
        print("$i ")
    }
 
    for(i in 10 downTo 1) {     // Same as - for(i in 10.downTo(1))
        print("$i ")
    }
 
    for(i in 1 until 10 step 2) { // Same as - for(i in 1.until(10).step(2))
        print("$i ")
    }
}

..........................................................................................................................................
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Code: Nullables
Please find the Code for Nullables here: 



package eu.tutorials.helloworld
 
fun main(){
    // NULLABLES/OPTIONALS in Kotlin
// Kotlin supports nullability as part of its type System.
// That means You have the ability to declare whether 
// a variable can hold a null value or not.
// By supporting nullability in the type system,
// the compiler can detect 
// possible NullPointerException errors at compile time 
// and reduce the possibility of having them thrown at runtime.
    var name: String = "Denis"
// name = null // Compilation Error
 
    var nullableName: String? = "Denis"
    nullableName = null // Works
 
// Here name cannot/must not be null
    val len = name.length
    val upper = name.toLowerCase()
 
// but the same methods won't work on nullable types
    val len2 = nullableName.length // Compilation Error
    val upper2 = nullableName.toLowerCase()  // Compilation Error
 
// So how can we solve this? We could do a null check before hand
 
    val nullableName2: String? = "Denis"
 
    if(nullableName2 != null) {
        println("Hello, ${nullableName2.toLowerCase()}.")
        println("Your name is ${nullableName2.length} characters long.")
    } else {
        println("Hello, Guest")
    }
 
// This works but seems to be quite some work...
// So how about we shorten the syntax...
// Kotlin provides a Safe call operator, ?.  
// It allows you to combine a null-check and 
// a method call in a single expression.
 
    nullableName2?.toLowerCase()
 
// This is the same as:
    if(nullableName2 != null)
        nullableName2.toLowerCase()
    else
        null
 
// You can use methods on a nullable variable like this
    val nullableName3: String? = null
 
    println(nullableName3?.toLowerCase()) // prints null
    println(nullableName3?.length) // prints null
 
// You can perform a chain safe calls:
    //val wifesAge: String? = user?.wife?.age
 
 
// Let'S say we don’t want to print anything if 
// the variable is null?
 
// In order to perform an operation only if the 
// variable is not null, we can use the safe call 
// operator with let -
 
    val nullableName4: String? = null
 
    nullableName4?.let { println(it.toLowerCase()) }
    nullableName4?.let { println(it.length) }
// Prints nothing because there nullableName is null 
// and we used let to prevent anything from being performed
 
 
// What if we would like to enter a default value?
// Then we can use the elvis operator ?:
    val name2 = nullableName4 ?: "Guest"
    
    //val wifesAge2: String? = user?.wife?.age ?: 0
 
 
// Not null assertion : !! Operator
// The !! operator converts a nullable type to a 
// non-null type, and throws a NullPointerException 
// if the nullable type holds a null value.
// This is risky, and you should only use it if 
// you are 100% certain, that there will be a value in 
// the variable.
    val nullableName5: String? = null
    nullableName5!!.toLowerCase() // Results in NullPointerException
 
}
 
 
 ......................................................................................................................
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 Code - Classes
class Person constructor(_firstName: String, _lastName: String) { // or class Person constructor    (_firstName: String, _lastName: String) 
    // Member Variables (Properties) of the class
    var firstName: String
    var lastName: String
 
    // Initializer Block
    init {
        this.firstName = _firstName
        this.lastName = _lastName
 
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// create an object like so:
// val denis = Person("Denis", "Panjuta")
 
// Alternatively:
class Person (_firstName: String, _lastName: String) {
    // Member Variables (Properties) of the class
    var firstName: String = _firstName
    var lastName: String = _lastName
 
    // Initializer Block
    init {
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// Alternatively:
class Person(var firstName: String, var lastName: String) {
    // Initializer Block
    init {
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// Or even:
// whereby John and Doe will be default values 
class Person(var firstName: String = "John", var lastName: String= "Doe") {
    // Initializer Block
    init {
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// Create an object:
/*
    val john = Person()
    val johnPeterson = Person(lastname: "Peterson")
 
*/
 
class Person(var firstName: String, var lastName: String) {
    var age: Int? = null
    var hobby: String = "Watch Netflix"
    var myFirstName = firstName
 
    // Secondary Constructor
    constructor(firstName: String, lastName: String, age: Int): this(firstName, lastName)  {
        this.age = if(age > 0) age else throw IllegalArgumentException("Age must be greater than zero")
    }
 
    fun stateHobby(){
        println("$firstname \'s Hobby is: $hobby'" )
    }
}
 
// You can use primary or secondary Constructor to create an object
 
// Calls the primary constructor (Age will be null in this case)
val person1 = Person("Denis", "Panjuta")
 
// Calls the secondary constructor
val person2 = Person("Elon", "Musk", 48) 
 
 
 
// Having multiple overloads:
 
class Person(var firstName: String, var lastName: String) {
    var age: Int? = null
    var eyeColor: String? = null
    
    // Secondary Constructor
    constructor(firstName: String, lastName: String, age: Int): this(firstName, lastName)  {
        this.age = if(age > 0) age else throw IllegalArgumentException("Age must be greater than zero")
    }
 
    // Secondary Constructor
    constructor(firstName: String, lastName: String, age: Int, eyeColor: String): 
            this(firstName, lastName, age)  {
        this.eyeColor = eyeColor
    }
}
 
 
// SETTERS AND GETTERS
 
// User class with a Primary constructor that accepts
// three parameters
class Car(_brand: String, _model: String, _maxSpeed: Int) {
    // Properties of User class
    val brand: String = _brand         // Immutable (Read only)
    var model: String = _model  // Mutable
    var maxSpeed: Int = _maxSpeed       // Mutable
}
 
// Kotlin internally generates a default getter and setter for mutable properties, and a getter (only) for read-only properties.
 
It calls these getters and setters internally whenever 
// you access or modify a property using the dot(.) notation.
This is how it would look like internally
class Car(_brand: String, _model: String, _maxSpeed: Int) {
    val brand: String = _brand
        get() = field
    
    var model: String = _model
        get() = field
        set(value) {
            field = value
        }
    
    var maxSpeed: Int = _maxSpeed
        get() = field
        set(value) {
            field = value
        }
}
 
// value
// We use value as the name of the setter parameter. This is the default convention in Kotlin but you’re free to use any other name if you want.
// The value parameter contains the value that a property is assigned to. For example, when you write user.name = "Elon Musk", 
// the value parameter contains the assigned value "Elon Musk".
 
// 2. Backing Field (field)
// Backing field helps you refer to the property 
// inside the getter and setter methods. 
// This is required because if you use the property 
// directly inside the getter or setter then you’ll
// run into a recursive call which will generate 
// a StackOverflowError.
 
 
class Car() {
 
    lateinit var owner : String
 
    val myBrand: String = "BMW"
    // Custom getter
    get() {     
        return field.toLowerCase()
    }   
    
    
    // default setter and getter
    var myModel: String = "M5"
        private set
 
    var myMaxSpeed: Int = maxSpeed
        get() = field
        // Custom Setter
        set(value) {
            field = if(value > 0) value else throw IllegalArgumentException("_maxSpeed must be greater than zero")
    }
 
    init{
        this.myModel = "M3"
        this.owner = "Frank"
    }
}
...................................................................................................................................
......................................................................................................................................
Challenge Classes
Please extend our example of the MobilePhone class with

class MobilePhone(osName: String, brand: String, model: String){
    init {
        println("The phone $model from $brand uses $osName as its Operating System")
    }
}
Add a member to it, which indicates how much battery is left (call it "battery". Initialize this value with a number between 0 and 50.

Then add a function
"chargeBattery"
Which needs details about how much was charged.

It should print out how much battery the phone had before, how much was charged and how much it has now.
Create an Object of the class and call this function. Charge the battery by 30.

........................................................................................................................................................
.......................................................................................................................................................
Solution: Challenge Classes
Here is my sample solution for the challenge. Of course, there are many different ways of solving this.

fun main(){
    val iphone = MobilePhone("iOS", "Apple", "iPhone 12")
    val galaxyS20 = MobilePhone("Android","Samsung", "Galaxy S20")
    val mateXS = MobilePhone("Android", "Huawei", "Mate X S")
}
 
class MobilePhone(osName: String, brand: String, model: String){
 
    private var battery = 30
 
    init {
        println("The phone $model from $brand uses $osName as its Operating System")
    }
 
    fun chargeBattery(chargedBy: Int){
        println("Battery was at $battery and is at ${battery+chargedBy} now")
        battery += chargedBy
    }
}














